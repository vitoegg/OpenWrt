name: Build-OpenWrt-Lite

on:
  workflow_dispatch:

# Scheduled trigger compilation
  schedule:
    - cron: 0 4 15 2,5,8,11 *

env:
  DASHBOARD_PASSWORD: ${{ secrets.DASHBOARD_PASSWORD }}
  ROOT_PASSWORD_HASH: ${{ secrets.ROOT_PASSWORD_HASH }}
  PPPOE_USERNAME: ${{ secrets.PPPOE_USERNAME }}
  PPPOE_PASSWORD: ${{ secrets.PPPOE_PASSWORD }}
  PPPOE_MAC: ${{ secrets.PPPOE_MAC }}
  ROUTER_MAC: ${{ secrets.ROUTER_MAC }}
  LMINI_MAC: ${{ secrets.LMINI_MAC }}
  UPDATE_SH_URL: ${{ secrets.UPDATE_SH_URL }}
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  REPO_USERNAME: ${{ secrets.REPO_USERNAME }}
  REPO_URL: ${{ secrets.REPO_URL }}
  HARDWARE_MODEL: MINISFORUM UN100D

jobs:
  build:
    name: Build OpenWrt Lite
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Set Timezone
      run: sudo timedatectl set-timezone 'Asia/Shanghai'

    - name: Show System Info
      run: |
        lscpu
        free -h
        df -Th
        uname -a

    - name: Set Release ENV
      run: |
        sudo mkdir -p /builder
        sudo chown -R runner:runner /builder
        echo WORKDIR="/builder" >> "$GITHUB_ENV"

    - name: Free Disk Space
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile /mnt/swapfile
        sudo docker image prune -a -f
        sudo systemctl stop docker
        sudo snap set system refresh.retain=2
        sudo apt-get -y purge firefox clang* gcc-12 gcc-14 ghc* google* llvm* mono* mongo* mysql* php*
        sudo apt-get -y autoremove --purge
        sudo apt-get clean
        sudo rm -rf /etc/mysql /etc/php /usr/lib/{jvm,llvm} /usr/libexec/docker /usr/local /usr/src/* /var/lib/docker /var/lib/gems /var/lib/mysql /var/lib/snapd /etc/skel /opt/{microsoft,az,hostedtoolcache,cni,mssql-tools,pipx} /usr/share/{az*,dotnet,swift,miniconda,gradle*,java,kotlinc,ri,sbt} /root/{.sbt,.local,.npm} /usr/libexec/gcc/x86_64-linux-gnu/14 /usr/lib/x86_64-linux-gnu/{*clang*,*LLVM*} /home/linuxbrew
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        rm -rf ~/{.cargo,.dotnet,.rustup}
        df -Th

    - name: Create Swap
      run: |
        sudo dd if=/dev/zero of=/mnt/swapfile bs=1M count=8192
        sudo chmod 600 /mnt/swapfile
        sudo mkswap /mnt/swapfile
        sudo swapon /mnt/swapfile
        free -h | grep -i swap

    - name: Build System Setup
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential flex bison cmake g++ gawk gcc-multilib g++-multilib gettext git libfuse-dev libncurses5-dev libssl-dev python3 python3-pip python3-ply python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch upx-ucl autoconf automake curl asciidoc binutils bzip2 lib32gcc-s1 libc6-dev-i386 uglifyjs msmtp texinfo libreadline-dev libglib2.0-dev xmlto libelf-dev libtool autopoint antlr3 gperf ccache swig coreutils haveged scons libpython3-dev rename qemu-utils
        sudo apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'

    - name: Create VG & LV
      run: |
        mnt_size=$(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//')
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 2)
        sudo truncate -s "$mnt_size"G /mnt/mnt.img
        sudo truncate -s "$root_size"G /root.img
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        sudo pvcreate /dev/loop6
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7
        sudo lvcreate -n runner -l 100%FREE github
        sudo mkfs.xfs /dev/github/runner

    - name: Mount LV
      run: |
        sudo mkdir -p /builder
        sudo mount /dev/github/runner /builder
        sudo chown -R runner:runner /builder
        df -Th

    - name: Compile OpenWrt
      working-directory: /builder
      id: compile
      continue-on-error: true
      run: |
        echo "BUILD_START_TIME=$(date +%s)" >> $GITHUB_ENV
        export GITHUB_REPO=vitoegg/OpenLite
        export LAN=192.168.10.1
        # Download and replace build.sh
        curl -sS https://raw.githubusercontent.com/vitoegg/OpenLite/main/openwrt/build.sh -o build.sh
        sed -i 's|https://\$mirror/openwrt/23-config-musl-x86|https://raw.githubusercontent.com/vitoegg/OpenWrt/main/scripts/Lite/23-config-musl-x86|g' build.sh
        sed -i 's|https://\$mirror/openwrt/23-config-common-custom|https://raw.githubusercontent.com/vitoegg/OpenWrt/main/scripts/Lite/23-config-common-custom|g' build.sh
        sed -i 's|https://\$mirror/openwrt/23-config-common-lite|https://raw.githubusercontent.com/vitoegg/OpenWrt/main/scripts/Lite/23-config-common-lite|g' build.sh
        sed -i 's|https://\$mirror/openwrt/scripts/06-custom.sh|https://raw.githubusercontent.com/vitoegg/OpenWrt/main/scripts/Lite/06-custom.sh|g' build.sh
        # Build
        bash build.sh lite x86_64 | tee build.log

    - name: Extensive Failed Logs
      working-directory: /builder
      if: steps.compile.outcome == 'failure'
      run: |
        cd openwrt
        make V=s

    - name: Set Compiled ENV
      working-directory: /builder
      if: steps.compile.outcome == 'success'
      run: |
        # Set kernel version
        KERNEL=$(grep -oE 'Kernel: [0-9]+(\.[0-9]+)+(-[0-9]+)?' build.log | head -1 | awk '{print $2}' | grep -oE '^[0-9]+(\.[0-9]+)+')
        echo "KERNEL_PATCHVER=$KERNEL" >> $GITHUB_ENV
        
        # Set LuCI version
        LUCI=$(grep -oE 'Building v[0-9]+(\.[0-9]+)+' build.log | head -1 | awk '{print $2}' | grep -oE '[0-9]+\.[0-9]+')
        echo "LUCI_VERSION=$LUCI" >> $GITHUB_ENV

        # Calculate build duration
        BUILD_END_TIME=$(date +%s)
        BUILD_TIME=$((BUILD_END_TIME - ${{ env.BUILD_START_TIME }}))
        
        # Calculate hours and minutes
        BUILD_HOURS=$((BUILD_TIME / 3600))
        BUILD_MINUTES=$(((BUILD_TIME % 3600) / 60))
        
        # Format build time
        if [ $BUILD_HOURS -gt 0 ]; then
          BUILD_DURATION="${BUILD_HOURS}h${BUILD_MINUTES}min"
        else
          BUILD_DURATION="${BUILD_MINUTES}min"
        fi
        
        # Set environment variables
        echo "BUILD_DURATION=$BUILD_DURATION" >> $GITHUB_ENV
        echo "TAG_TIME=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV

    - name: Prepare Firmware Files
      working-directory: /builder
      run: |
        mkdir -p firmware
        cp -a openwrt/bin/targets/x86/*/*-squashfs-combined-efi.img.gz firmware/openwrt-lite-${{ env.TAG_TIME }}-x86-64-efi.img.gz

    - name: Upload to WebDAV
      uses: bxb100/action-upload@main
      if: steps.compile.outcome == 'success'
      with:
        provider: webdav
        provider_options: |
          endpoint=${{ secrets.WEBDAV_ENDPOINT }}
          username=${{ secrets.WEBDAV_USERNAME }}
          password=${{ secrets.WEBDAV_PASSWORD }}
          root=/openwrt/
        include: '${{ env.WORKDIR }}/firmware/*'

    - name: Send Telegram Message
      if: steps.compile.outcome == 'success'
      run: |
        curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendPhoto" \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d photo="https://mirror.1991991.xyz/Picture/openwrt.webp" \
          --data-urlencode "caption=#OpenWRT #HomeLab #Lite

          *🎉 Ready to roll! Dive in! 🎉*

          - 🛠 Hardware: ${{ env.HARDWARE_MODEL }}

          - 🌐 Kernel: ${{ env.KERNEL_PATCHVER }}

          - 📦 LuCI: ${{ env.LUCI_VERSION }}

          - ⌛ Build Duration: ${{ env.BUILD_DURATION }}

          - 🔗 Firmware: [Click to View](${{ secrets.FIRMWARE_DOWNLOAD_URL }})" \
          -d parse_mode=Markdown >/dev/null 2>&1

    - name: Delete Workflow Runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ env.REPO_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 0
        keep_minimum_runs: 0